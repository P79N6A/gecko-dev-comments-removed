# 
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

DEPTH     = @DEPTH@
topsrcdir = @top_srcdir@
srcdir    = @srcdir@
VPATH     = @srcdir@

include $(DEPTH)/config/autoconf.mk

# On Windows, we don't automatically get "lib" prepended, but we need it.
LIBRARY_NAME     = libGLESv2
MODULE_NAME      = libglesv2
FORCE_SHARED_LIB = 1

# ANGLE uses the STL, so we can't use our derpy STL wrappers.
STL_FLAGS =

# ANGLE uses exceptions internally, so we need to have exception handling
# support
ENABLE_CXX_EXCEPTIONS = 1

# Since we're building off in our own world, we don't want to have
# mozilla-config.h and -DMOZILLA_CLIENT automatically included and defined, so
# we just overwrite OS_COMPILE_C(XX)FLAGS.
OS_COMPILE_CFLAGS   = $(OS_CPPFLAGS)
OS_COMPILE_CXXFLAGS = $(OS_CPPFLAGS)

DEFINES += -DANGLE_BUILD -DNOMINMAX -DLIBGLESV2_EXPORTS -D_CRT_SECURE_NO_DEPRECATE

ifndef MOZ_DEBUG
DEFINES += -D_SECURE_SCL=0
endif

# The below is a rough translation of build_angle.gypi,
# copied from src/Makefile.in.
DEFINES += -DANGLE_DISABLE_TRACE
DEFINES += -DANGLE_COMPILE_OPTIMIZATION_LEVEL=D3DCOMPILE_OPTIMIZATION_LEVEL0

# Target: 'preprocessor'
# src/compiler/preprocessor:
VPATH += $(srcdir)/../compiler/preprocessor
CPPSRCS += \
  PreprocessorDiagnostics.cpp \
  PreprocessorDirectiveHandler.cpp \
  DirectiveParser.cpp \
  ExpressionParser.cpp \
  Input.cpp \
  Lexer.cpp \
  Macro.cpp \
  MacroExpander.cpp \
  Preprocessor.cpp \
  Token.cpp \
  Tokenizer.cpp \
  $(NULL)

# Target: 'translator_common'
#   Requires: 'preprocessor'
LOCAL_INCLUDES = \
  -I$(srcdir)/../../include \
  -I$(srcdir)/../../include/KHR \
  -I$(srcdir)/..

DEFINES += -DCOMPILER_IMPLEMENTATION

VPATH += $(srcdir)/../compiler
# src/compiler:
CPPSRCS += \
  ArrayBoundsClamper.cpp \
  BuiltInFunctionEmulator.cpp \
  Compiler.cpp \
  compiler_debug.cpp \
  DetectRecursion.cpp \
  Diagnostics.cpp \
  DirectiveHandler.cpp \
  ForLoopUnroll.cpp \
  glslang_lex.cpp \
  glslang_tab.cpp \
  InfoSink.cpp \
  Initialize.cpp \
  InitializeDll.cpp \
  InitializeParseContext.cpp \
  Intermediate.cpp \
  intermOut.cpp \
  IntermTraverse.cpp \
  MapLongVariableNames.cpp \
  parseConst.cpp \
  ParseHelper.cpp \
  PoolAlloc.cpp \
  QualifierAlive.cpp \
  RemoveTree.cpp \
  spooky.cpp \
  SymbolTable.cpp \
  util.cpp \
  ValidateLimitations.cpp \
  VariableInfo.cpp \
  VariablePacker.cpp \
  $(NULL)

VPATH += $(srcdir)/../compiler/depgraph
# src/compiler/depgraph:
CPPSRCS += \
  DependencyGraph.cpp \
  DependencyGraphBuilder.cpp \
  DependencyGraphOutput.cpp \
  DependencyGraphTraverse.cpp \
  $(NULL)

VPATH += $(srcdir)/../compiler/timing
# src/compiler/timing:
CPPSRCS += \
  RestrictFragmentShaderTiming.cpp \
  RestrictVertexShaderTiming.cpp \
  $(NULL)

ifeq ($(MOZ_WIDGET_TOOLKIT),windows)
CPPSRCS += ossource_win.cpp
else
CPPSRCS += ossource_posix.cpp
endif

# Above should match the relevant targets from angle/Makefile.in.

# Below is a transcription of more targets from build_angle.gypi.

# Target: 'translator_hlsl'
#   Requires: 'translator_common'

# src/compiler:
CPPSRCS += \
  ShaderLang.cpp \
  DetectDiscontinuity.cpp \
  CodeGenHLSL.cpp \
  OutputHLSL.cpp \
  TranslatorHLSL.cpp \
  UnfoldShortCircuit.cpp \
  SearchSymbol.cpp \
  $(NULL)

# Target: 'libGLESv2'
#   Requires: 'translator_hlsl'
LOCAL_INCLUDES += -I"$(MOZ_DIRECTX_SDK_PATH)/include"

VPATH += $(srcdir)/../common
# src/common:
CPPSRCS += \
  debug.cpp \
  RefCountObject.cpp \
  $(NULL)

# src/libGLESv2:
CPPSRCS += \
  IndexDataManager.cpp \
  VertexDataManager.cpp \
  Blit.cpp \
  Buffer.cpp \
  Context.cpp \
  D3DConstantTable.cpp \
  Fence.cpp \
  Float16ToFloat32.cpp \
  Framebuffer.cpp \
  HandleAllocator.cpp \
  libGLESv2.cpp \
  main.cpp \
  Program.cpp \
  ProgramBinary.cpp \
  Query.cpp \
  Renderbuffer.cpp \
  ResourceManager.cpp \
  Shader.cpp \
  Texture.cpp \
  TextureSSE2.cpp \
  utilities.cpp \
  $(NULL)
  
DEFFILE = $(srcdir)/libGLESv2.def
RCFILE  = $(srcdir)/libGLESv2.rc

# End build_angle.gypi transcription.

include $(topsrcdir)/config/rules.mk

ifdef GNU_CC

TextureSSE2.$(OBJ_SUFFIX): CXXFLAGS+=-msse2

OS_CXXFLAGS := $(filter-out -fno-exceptions,$(OS_CXXFLAGS)) -fexceptions
OS_LIBS += -ld3d9
ifdef MOZ_D3DX9_VERSION
OS_LIBS += -ld3dcompiler_$(MOZ_D3DX9_VERSION)
else
OS_LIBS += -ld3dcompiler
endif

else

EXTRA_DSO_LDOPTS = "$(MOZ_DIRECTX_SDK_PATH)/lib/$(MOZ_DIRECTX_SDK_CPU_SUFFIX)/d3d9.lib" \
                   "$(MOZ_DIRECTX_SDK_PATH)/lib/$(MOZ_DIRECTX_SDK_CPU_SUFFIX)/D3DCompiler.lib"

endif
