# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

DEPTH     = @DEPTH@
topsrcdir = @top_srcdir@
srcdir    = @srcdir@
VPATH     = @srcdir@

include $(DEPTH)/config/autoconf.mk

LIBRARY_NAME   = angle
MSVC_ENABLE_PGO := 1
LIBXUL_LIBRARY = 1
ifeq (WINNT,$(OS_TARGET))
VISIBILITY_FLAGS =
endif

# The below is a rough translation of build_angle.gypi:
DEFINES += -DANGLE_DISABLE_TRACE
DEFINES += -DANGLE_COMPILE_OPTIMIZATION_LEVEL=D3DCOMPILE_OPTIMIZATION_LEVEL1

# Target: 'preprocessor'
# src/compiler/preprocessor:
VPATH += $(srcdir)/src/compiler/preprocessor
CPPSRCS += \
  DiagnosticsBase.cpp \
  DirectiveHandlerBase.cpp \
  DirectiveParser.cpp \
  ExpressionParser.cpp \
  Input.cpp \
  Lexer.cpp \
  Macro.cpp \
  MacroExpander.cpp \
  Preprocessor.cpp \
  Token.cpp \
  Tokenizer.cpp \
  $(NULL)

# Target: 'translator_common'
#   Requires: 'preprocessor'
LOCAL_INCLUDES += \
  -I$(srcdir)/include \
  -I$(srcdir)/include/KHR \
  -I$(srcdir)/src

DEFINES += -DCOMPILER_IMPLEMENTATION

VPATH += $(srcdir)/src/compiler
# src/compiler:
CPPSRCS += \
  BuiltInFunctionEmulator.cpp \
  Compiler.cpp \
  compiler_debug.cpp \
  DetectRecursion.cpp \
  Diagnostics.cpp \
  DirectiveHandler.cpp \
  ForLoopUnroll.cpp \
  glslang_lex.cpp \
  glslang_tab.cpp \
  InfoSink.cpp \
  Initialize.cpp \
  InitializeDll.cpp \
  InitializeParseContext.cpp \
  Intermediate.cpp \
  intermOut.cpp \
  IntermTraverse.cpp \
  MapLongVariableNames.cpp \
  parseConst.cpp \
  ParseHelper.cpp \
  PoolAlloc.cpp \
  QualifierAlive.cpp \
  RemoveTree.cpp \
  spooky.cpp \
  SymbolTable.cpp \
  util.cpp \
  ValidateLimitations.cpp \
  VariableInfo.cpp \
  VariablePacker.cpp \
  $(NULL)

VPATH += $(srcdir)/src/compiler/depgraph
# src/compiler/depgraph:
CPPSRCS += \
  DependencyGraph.cpp \
  DependencyGraphBuilder.cpp \
  DependencyGraphOutput.cpp \
  DependencyGraphTraverse.cpp \
  $(NULL)

VPATH += $(srcdir)/src/compiler/timing
# src/compiler/timing:
CPPSRCS += \
  RestrictFragmentShaderTiming.cpp \
  RestrictVertexShaderTiming.cpp \
  $(NULL)

VPATH += $(srcdir)/src/third_party/compiler
# src/third_party/compiler:
CPPSRCS += \
  ArrayBoundsClamper.cpp \
  $(NULL)

ifeq ($(MOZ_WIDGET_TOOLKIT),windows)
CPPSRCS += ossource_win.cpp
else
CPPSRCS += ossource_posix.cpp
endif


# Target: 'translator_glsl'
#   Requires: 'translator_common'
# src/compiler:
CPPSRCS += \
  CodeGenGLSL.cpp \
  OutputESSL.cpp \
  OutputGLSLBase.cpp \
  OutputGLSL.cpp \
  ShaderLang.cpp \
  TranslatorESSL.cpp \
  TranslatorGLSL.cpp \
  VersionGLSL.cpp \
  $(NULL)

  
# End gpy translation. Remainder of targets are in src/libEGL/Makefile.in and
# src/libGLESv2/Makefile.in

ifdef MOZ_ANGLE_RENDERER

libs::
ifdef MOZ_D3DCOMPILER_CAB
	expand "$(MOZ_D3DCOMPILER_CAB)" -F:$(MOZ_D3DCOMPILER_DLL) "$(DIST)/bin"
endif

endif

include $(topsrcdir)/config/rules.mk

# We have to filter out -pedantic, because of
# comma-at-end-of-enumerator list failures.  We can try to get this fixed
# upstream at some point.
CXXFLAGS := $(filter-out -pedantic,$(CXXFLAGS))
CFLAGS   := $(filter-out -pedantic,$(CFLAGS))
