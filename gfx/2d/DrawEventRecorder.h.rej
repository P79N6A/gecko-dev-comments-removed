--- DrawEventRecorder.h
+++ DrawEventRecorder.h
@@ -6,34 +6,20 @@
 #ifndef MOZILLA_GFX_DRAWEVENTRECORDER_H_
 #define MOZILLA_GFX_DRAWEVENTRECORDER_H_
 
 #include "2D.h"
 #include "RecordedEvent.h"
 #include <ostream>
 #include <fstream>
 
-#if defined(_MSC_VER) || defined(MOZ_WIDGET_ANDROID)
+#if defined(_MSC_VER)
 #include <hash_set>
 #else
-#include <ext/hash_set>
-#endif
-
-#ifndef _MSC_VER
-#ifndef MOZ_WIDGET_ANDROID
-namespace __gnu_cxx {
-#endif
-template<>
-struct hash<void *> {
-  size_t operator()(const void * __x) const {
-    return reinterpret_cast<size_t>(__x); }
-};
-#ifndef MOZ_WIDGET_ANDROID
-}
-#endif
+#include <unordered_set>
 #endif
 
 namespace mozilla {
 namespace gfx {
 
 class PathRecording;
 
 class DrawEventRecorderPrivate : public DrawEventRecorder
@@ -62,20 +48,18 @@ public:
 
 protected:
   std::ostream *mOutputStream;
 
   virtual void Flush() = 0;
 
 #if defined(_MSC_VER)
   typedef stdext::hash_set<const void*> ObjectSet;
-#elif defined(MOZ_WIDGET_ANDROID)
-  typedef hash_set<const void*> ObjectSet;
 #else
-  typedef __gnu_cxx::hash_set<const void*, __gnu_cxx::hash<void*> > ObjectSet;
+  typedef std::unordered_set<const void*> ObjectSet;
 #endif
 
   ObjectSet mStoredPaths;
   ObjectSet mStoredScaledFonts;
 };
 
 class DrawEventRecorderFile : public DrawEventRecorderPrivate
 {
