/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIDOMDOMRequest;
interface nsIDOMMozMobileCFInfo;
interface nsIDOMMozMobileConnectionInfo;
interface nsIDOMMozMobileNetworkInfo;
interface nsIDOMWindow;

[scriptable, uuid(74361840-c913-11e2-8b8b-0800200c9a66)]
interface nsIMobileConnectionListener : nsISupports
{
  void notifyVoiceChanged();
  void notifyDataChanged();
  void notifyUssdReceived(in DOMString message,
                          in boolean sessionEnded);
  void notifyDataError(in DOMString message);
  void notifyCFStateChange(in boolean success,
                           in unsigned short action,
                           in unsigned short reason,
                           in DOMString number,
                           in unsigned short timeSeconds,
                           in unsigned short serviceClass);
};

/**
 * XPCOM component (in the content process) that provides the mobile
 * network information.
 */
[scriptable, uuid(3fea6ca5-c535-4662-9f42-eb2fc2ae9975)]
interface nsIMobileConnectionProvider : nsISupports
{
  /**
   * Called when a content process registers receiving unsolicited messages from
   * RadioInterfaceLayer in the chrome process. Only a content process that has
   * the 'mobileconnection' permission is allowed to register.
   */
  void registerMobileConnectionMsg(in nsIMobileConnectionListener listener);
  void unregisterMobileConnectionMsg(in nsIMobileConnectionListener listener);

  readonly attribute nsIDOMMozMobileConnectionInfo voiceConnectionInfo;
  readonly attribute nsIDOMMozMobileConnectionInfo dataConnectionInfo;
  readonly attribute DOMString networkSelectionMode;

  nsIDOMDOMRequest getNetworks(in nsIDOMWindow window);
  nsIDOMDOMRequest selectNetwork(in nsIDOMWindow window, in nsIDOMMozMobileNetworkInfo network);
  nsIDOMDOMRequest selectNetworkAutomatically(in nsIDOMWindow window);

  nsIDOMDOMRequest sendMMI(in nsIDOMWindow window, in DOMString mmi);
  nsIDOMDOMRequest cancelMMI(in nsIDOMWindow window);

  nsIDOMDOMRequest getCallForwardingOption(in nsIDOMWindow   window,
                                           in unsigned short reason);
  nsIDOMDOMRequest setCallForwardingOption(in nsIDOMWindow          window,
                                           in nsIDOMMozMobileCFInfo CFInfo);

  nsIDOMDOMRequest getCallBarringOption(in nsIDOMWindow window,
                                        in jsval        option);
  nsIDOMDOMRequest setCallBarringOption(in nsIDOMWindow window,
                                        in jsval        option);

  nsIDOMDOMRequest setCallWaitingOption(in nsIDOMWindow   window,
                                        in bool enabled);
  nsIDOMDOMRequest getCallWaitingOption(in nsIDOMWindow   window);

  nsIDOMDOMRequest setCallingLineIdRestriction(in nsIDOMWindow   window,
                                               in unsigned short clirMode);
  nsIDOMDOMRequest getCallingLineIdRestriction(in nsIDOMWindow   window);
};
