



from __future__ import unicode_literals

import string

makefile_template = """# THIS FILE IS AUTOGENERATED BY ${caller} - DO NOT EDIT

${files}
"""

mozbuild_template = """# THIS FILE IS AUTOGENERATED BY ${caller} - DO NOT EDIT

${dirs}
"""

manifest_template = """# THIS FILE IS AUTOGENERATED BY ${caller} - DO NOT EDIT
[DEFAULT]
support-files =
${supportfiles}

${tests}
"""

reftest_template = """# THIS FILE IS AUTOGENERATED BY ${caller} - DO NOT EDIT

${reftests}
"""



def makefileString(entries):
    if not len(entries):
        return "  $(NULL)"
    return "\n".join(["  %s \\" % (entry, ) for entry in entries]) + "\n  $(NULL)"


def assignList(variable, entries):
    return "%s := \\\n%s" % (variable, makefileString(entries))


def mozbuildDirs(dirs):
    """Obtain a DIRS assignment string for mozbuild files."""
    parts = ['DIRS += [']
    for d in dirs:
        parts.append("    '%s'," % d)
    parts.append(']')

    return '\n'.join(parts)

def substMakefile(caller, files):
    return string.Template(makefile_template).substitute({
        "caller": caller,
        "files": assignList("MOCHITEST_FILES", files) if files else ""
    })


def substMozbuild(caller, dirs):
    return string.Template(mozbuild_template).substitute({
        "caller": caller,
        "dirs": mozbuildDirs(dirs),
    })


def substManifest(caller, test_files, support_files):
    test_files = [f.lstrip('/') for f in test_files]
    support_files = [f.lstrip('/') for f in support_files]

    return string.Template(manifest_template).substitute({
        'caller': caller,
        'supportfiles': '\n'.join('  %s' % f for f in sorted(support_files)),
        'tests': '\n'.join('[%s]' % f for f in sorted(test_files))
    })


def substReftestList(caller, tests):
    def reftests(tests):
        return "\n".join(" ".join(line) for line in tests)

    return string.Template(reftest_template).substitute({
        "caller": caller,
        "reftests": reftests(tests),
    })

