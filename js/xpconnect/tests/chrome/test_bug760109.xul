<?xml version="1.0"?>
<?xml-stylesheet type="text/css" href="chrome://global/skin"?>
<?xml-stylesheet type="text/css" href="chrome://mochikit/content/tests/SimpleTest/test.css"?>
<!--
https://bugzilla.mozilla.org/show_bug.cgi?id=760109
-->
<window title="Mozilla Bug 760109"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>

  <!-- test results are displayed in the html:body -->
  <body xmlns="http://www.w3.org/1999/xhtml">
  <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=760109"
     target="_blank">Mozilla Bug 760109</a>
  </body>

  <!-- test code goes here -->
  <script type="application/javascript">
  <![CDATA[

  /** Test for COW prototype remapping.**/

  // This gets decompiled and run inside the sandbox.
  function sandboxCode() {

    // Check that COWs for objects with standard prototypes use the standard
    // prototype in the home compartment.
    var protoProto = Object.getPrototypeOf(Object.getPrototypeOf(chromeObject));
    ok(protoProto === Object.prototype,
       "Object prototype remapped properly");

    // Check |constructor|.
    // Note that the 'constructor' property of the underlying chrome object
    // will be resolved on SomeConstructor.prototype, which has an empty
    // __exposedProps__. This means that we shouldn't remap the property, even
    // though we'd also be able to find it on Object.prototype. Some recent
    // refactoring has made it possible to do the right thing here.
    is(typeof chromeObject.constructor, "undefined", "Object constructor does what we expect");
  }

  // We use a constructor to create the test object so that there's an
  // intermediate object on the prototype chain between the instance and the
  // standard prototype.
  function SomeConstructor() {
    this.foo = 2;
    this.bar = 3;
    this.baz = 4;
    this.__exposedProps__ = {foo: 'r', baz: 'rw'};
  }
  SomeConstructor.prototype.__exposedProps__ = {};

  const Cu = Components.utils;
  var sb = new Cu.Sandbox('http://www.example.org');
  sb.chromeObject = new SomeConstructor();
  sb.ok = ok;
  sb.is = is;
  Cu.evalInSandbox('(' + sandboxCode.toSource() + ')();', sb);

  ]]>
  </script>
</window>
