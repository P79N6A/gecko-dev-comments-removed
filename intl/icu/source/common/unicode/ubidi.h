















#ifndef UBIDI_H
#define UBIDI_H

#include "unicode/utypes.h"
#include "unicode/uchar.h"
#include "unicode/localpointer.h"



















































































































































































































































































































typedef uint8_t UBiDiLevel;

























#define UBIDI_DEFAULT_LTR 0xfe


























#define UBIDI_DEFAULT_RTL 0xff






#define UBIDI_MAX_EXPLICIT_LEVEL 125





#define UBIDI_LEVEL_OVERRIDE 0x80














#define UBIDI_MAP_NOWHERE   (-1)





enum UBiDiDirection {
  










  UBIDI_LTR,
  










  UBIDI_RTL,
  





  UBIDI_MIXED,
  





  UBIDI_NEUTRAL
};


typedef enum UBiDiDirection UBiDiDirection;











struct UBiDi;


typedef struct UBiDi UBiDi;
















U_STABLE UBiDi * U_EXPORT2
ubidi_open(void);



































U_STABLE UBiDi * U_EXPORT2
ubidi_openSized(int32_t maxLength, int32_t maxRunCount, UErrorCode *pErrorCode);





















U_STABLE void U_EXPORT2
ubidi_close(UBiDi *pBiDi);

#if U_SHOW_CPLUSPLUS_API

U_NAMESPACE_BEGIN










U_DEFINE_LOCAL_OPEN_POINTER(LocalUBiDiPointer, UBiDi, ubidi_close);

U_NAMESPACE_END

#endif

















































U_STABLE void U_EXPORT2
ubidi_setInverse(UBiDi *pBiDi, UBool isInverse);

















U_STABLE UBool U_EXPORT2
ubidi_isInverse(UBiDi *pBiDi);





















U_STABLE void U_EXPORT2
ubidi_orderParagraphsLTR(UBiDi *pBiDi, UBool orderParagraphsLTR);












U_STABLE UBool U_EXPORT2
ubidi_isOrderParagraphsLTR(UBiDi *pBiDi);








typedef enum UBiDiReorderingMode {
    


    UBIDI_REORDER_DEFAULT = 0,
    


    UBIDI_REORDER_NUMBERS_SPECIAL,
    


    UBIDI_REORDER_GROUP_NUMBERS_WITH_R,
    






    UBIDI_REORDER_RUNS_ONLY,
    



    UBIDI_REORDER_INVERSE_NUMBERS_AS_L,
    


    UBIDI_REORDER_INVERSE_LIKE_DIRECT,
    


    UBIDI_REORDER_INVERSE_FOR_NUMBERS_SPECIAL,
    

    UBIDI_REORDER_COUNT
} UBiDiReorderingMode;
























































































































































U_STABLE void U_EXPORT2
ubidi_setReorderingMode(UBiDi *pBiDi, UBiDiReorderingMode reorderingMode);









U_STABLE UBiDiReorderingMode U_EXPORT2
ubidi_getReorderingMode(UBiDi *pBiDi);








typedef enum UBiDiReorderingOption {
    





    UBIDI_OPTION_DEFAULT = 0,

    











































    UBIDI_OPTION_INSERT_MARKS = 1,

    















    UBIDI_OPTION_REMOVE_CONTROLS = 2,

    













































    UBIDI_OPTION_STREAMING = 4
} UBiDiReorderingOption;














U_STABLE void U_EXPORT2
ubidi_setReorderingOptions(UBiDi *pBiDi, uint32_t reorderingOptions);









U_STABLE uint32_t U_EXPORT2
ubidi_getReorderingOptions(UBiDi *pBiDi);





















































































U_STABLE void U_EXPORT2
ubidi_setContext(UBiDi *pBiDi,
                 const UChar *prologue, int32_t proLength,
                 const UChar *epilogue, int32_t epiLength,
                 UErrorCode *pErrorCode);
















































































U_STABLE void U_EXPORT2
ubidi_setPara(UBiDi *pBiDi, const UChar *text, int32_t length,
              UBiDiLevel paraLevel, UBiDiLevel *embeddingLevels,
              UErrorCode *pErrorCode);















































U_STABLE void U_EXPORT2
ubidi_setLine(const UBiDi *pParaBiDi,
              int32_t start, int32_t limit,
              UBiDi *pLineBiDi,
              UErrorCode *pErrorCode);
















U_STABLE UBiDiDirection U_EXPORT2
ubidi_getDirection(const UBiDi *pBiDi);




























U_STABLE UBiDiDirection U_EXPORT2
ubidi_getBaseDirection(const UChar *text,  int32_t length );












U_STABLE const UChar * U_EXPORT2
ubidi_getText(const UBiDi *pBiDi);









U_STABLE int32_t U_EXPORT2
ubidi_getLength(const UBiDi *pBiDi);
















U_STABLE UBiDiLevel U_EXPORT2
ubidi_getParaLevel(const UBiDi *pBiDi);









U_STABLE int32_t U_EXPORT2
ubidi_countParagraphs(UBiDi *pBiDi);



































U_STABLE int32_t U_EXPORT2
ubidi_getParagraph(const UBiDi *pBiDi, int32_t charIndex, int32_t *pParaStart,
                   int32_t *pParaLimit, UBiDiLevel *pParaLevel,
                   UErrorCode *pErrorCode);




























U_STABLE void U_EXPORT2
ubidi_getParagraphByIndex(const UBiDi *pBiDi, int32_t paraIndex,
                          int32_t *pParaStart, int32_t *pParaLimit,
                          UBiDiLevel *pParaLevel, UErrorCode *pErrorCode);
















U_STABLE UBiDiLevel U_EXPORT2
ubidi_getLevelAt(const UBiDi *pBiDi, int32_t charIndex);



















U_STABLE const UBiDiLevel * U_EXPORT2
ubidi_getLevels(UBiDi *pBiDi, UErrorCode *pErrorCode);

























U_STABLE void U_EXPORT2
ubidi_getLogicalRun(const UBiDi *pBiDi, int32_t logicalPosition,
                    int32_t *pLogicalLimit, UBiDiLevel *pLevel);
















U_STABLE int32_t U_EXPORT2
ubidi_countRuns(UBiDi *pBiDi, UErrorCode *pErrorCode);

























































U_STABLE UBiDiDirection U_EXPORT2
ubidi_getVisualRun(UBiDi *pBiDi, int32_t runIndex,
                   int32_t *pLogicalStart, int32_t *pLength);






































U_STABLE int32_t U_EXPORT2
ubidi_getVisualIndex(UBiDi *pBiDi, int32_t logicalIndex, UErrorCode *pErrorCode);

































U_STABLE int32_t U_EXPORT2
ubidi_getLogicalIndex(UBiDi *pBiDi, int32_t visualIndex, UErrorCode *pErrorCode);









































U_STABLE void U_EXPORT2
ubidi_getLogicalMap(UBiDi *pBiDi, int32_t *indexMap, UErrorCode *pErrorCode);


































U_STABLE void U_EXPORT2
ubidi_getVisualMap(UBiDi *pBiDi, int32_t *indexMap, UErrorCode *pErrorCode);





















U_STABLE void U_EXPORT2
ubidi_reorderLogical(const UBiDiLevel *levels, int32_t length, int32_t *indexMap);





















U_STABLE void U_EXPORT2
ubidi_reorderVisual(const UBiDiLevel *levels, int32_t length, int32_t *indexMap);

































U_STABLE void U_EXPORT2
ubidi_invertMap(const int32_t *srcMap, int32_t *destMap, int32_t length);










#define UBIDI_KEEP_BASE_COMBINING       1









#define UBIDI_DO_MIRRORING              2













#define UBIDI_INSERT_LRM_FOR_NUMERIC    4












#define UBIDI_REMOVE_BIDI_CONTROLS      8















#define UBIDI_OUTPUT_REVERSE            16







































U_STABLE int32_t U_EXPORT2
ubidi_getProcessedLength(const UBiDi *pBiDi);




























U_STABLE int32_t U_EXPORT2
ubidi_getResultLength(const UBiDi *pBiDi);

U_CDECL_BEGIN






#define U_BIDI_CLASS_DEFAULT  U_CHAR_DIRECTION_COUNT





















typedef UCharDirection U_CALLCONV
UBiDiClassCallback(const void *context, UChar32 c);

U_CDECL_END
















U_STABLE UCharDirection U_EXPORT2
ubidi_getCustomizedClass(UBiDi *pBiDi, UChar32 c);




























U_STABLE void U_EXPORT2
ubidi_setClassCallback(UBiDi *pBiDi, UBiDiClassCallback *newFn,
                       const void *newContext, UBiDiClassCallback **oldFn,
                       const void **oldContext, UErrorCode *pErrorCode);













U_STABLE void U_EXPORT2
ubidi_getClassCallback(UBiDi *pBiDi, UBiDiClassCallback **fn, const void **context);


































































U_STABLE int32_t U_EXPORT2
ubidi_writeReordered(UBiDi *pBiDi,
                     UChar *dest, int32_t destSize,
                     uint16_t options,
                     UErrorCode *pErrorCode);















































U_STABLE int32_t U_EXPORT2
ubidi_writeReverse(const UChar *src, int32_t srcLength,
                   UChar *dest, int32_t destSize,
                   uint16_t options,
                   UErrorCode *pErrorCode);




#endif
