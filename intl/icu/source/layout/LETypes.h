





#ifndef __LETYPES_H
#define __LETYPES_H

#if !defined(LE_USE_CMEMORY) && (defined(U_LAYOUT_IMPLEMENTATION) || defined(U_LAYOUTEX_IMPLEMENTATION) || defined(U_STATIC_IMPLEMENTATION) || defined(U_COMBINED_IMPLEMENTATION))
#define LE_USE_CMEMORY
#endif

#include "unicode/utypes.h"

#ifdef __cplusplus
#include "unicode/uobject.h"
#endif

#ifdef LE_USE_CMEMORY
#include "cmemory.h"
#endif











typedef int32_t le_int32;






typedef uint32_t le_uint32;






typedef int16_t le_int16;






typedef uint16_t le_uint16;






typedef int8_t le_int8;






typedef uint8_t le_uint8;







typedef UBool le_bool;

#ifndef NULL





#define NULL 0
#endif






typedef le_uint32 LETag;







typedef le_uint16 TTGlyphID;










typedef le_uint32 LEGlyphID;







#define LE_GLYPH_MASK     0x0000FFFF








#define LE_GLYPH_SHIFT    0








#define LE_SUB_FONT_MASK  0x00FF0000








#define LE_SUB_FONT_SHIFT 16








#define LE_CLIENT_MASK    0xFF000000








#define LE_CLIENT_SHIFT   24








#define LE_GET_GLYPH(gid) ((gid & LE_GLYPH_MASK) >> LE_GLYPH_SHIFT)







#define LE_GET_SUB_FONT(gid) ((gid & LE_SUB_FONT_MASK) >> LE_SUB_FONT_SHIFT)







#define LE_GET_CLIENT(gid) ((gid & LE_CLIENT_MASK) >> LE_CLIENT_SHIFT)








#define LE_SET_GLYPH(gid, glyph) ((gid & ~LE_GLYPH_MASK) | ((glyph << LE_GLYPH_SHIFT) & LE_GLYPH_MASK))







#define LE_SET_SUB_FONT(gid, font) ((gid & ~LE_SUB_FONT_MASK) | ((font << LE_SUB_FONT_SHIFT) & LE_SUB_FONT_MASK))







#define LE_SET_CLIENT(gid, client) ((gid & ~LE_CLIENT_MASK) | ((client << LE_CLIENT_SHIFT) & LE_CLIENT_MASK))







typedef UChar LEUnicode16;






typedef UChar32 LEUnicode32;

#ifndef U_HIDE_DEPRECATED_API





typedef UChar LEUnicode;
#endif  






struct LEPoint
{
    




    float fX;

    




    float fY;
};

#ifndef __cplusplus





typedef struct LEPoint LEPoint;
#endif


#ifndef U_HIDE_INTERNAL_API





#ifndef LE_ASSERT_BAD_FONT
#define LE_ASSERT_BAD_FONT 0
#endif





#if LE_ASSERT_BAD_FONT
#include <stdio.h>
#define LE_DEBUG_BAD_FONT(x) fprintf(stderr,"%s:%d: BAD FONT: %s\n", __FILE__, __LINE__, (x));
#else
#define LE_DEBUG_BAD_FONT(x)
#endif






#ifndef UINT32_MAX
#define LE_UINT32_MAX 0xFFFFFFFFU
#else
#define LE_UINT32_MAX UINT32_MAX
#endif

#ifndef UINTPTR_MAX
#define LE_UINTPTR_MAX LE_UINT32_MAX
#else
#define LE_UINTPTR_MAX UINTPTR_MAX
#endif




#define LE_RANGE_CHECK(type, count, ptrfn) (( (LE_UINTPTR_MAX / sizeof(type)) < (size_t)count ) ? NULL : (ptrfn))





#define LE_ARRAY_SIZE(array) (sizeof array / sizeof array[0])

#ifdef LE_USE_CMEMORY





#define LE_ARRAY_COPY(dst, src, count) uprv_memcpy((void *) (dst), (void *) (src), (count) * sizeof (src)[0])







#define LE_NEW_ARRAY(type, count) (type *)  LE_RANGE_CHECK(type,count,uprv_malloc((count) * sizeof(type)))







#define LE_GROW_ARRAY(array, newSize) uprv_realloc((void *) (array), (newSize) * sizeof (array)[0])

 





#define LE_DELETE_ARRAY(array) uprv_free((void *) (array))
#else



#include <stdlib.h>
#include <string.h>






#define LE_ARRAY_SIZE(array) (sizeof array / sizeof array[0])






#define LE_ARRAY_COPY(dst, src, count) memcpy((void *) (dst), (void *) (src), (count) * sizeof (src)[0])







#define LE_NEW_ARRAY(type, count) LE_RANGE_CHECK(type,count,(type *) malloc((count) * sizeof(type)))







#define LE_GROW_ARRAY(array, newSize) realloc((void *) (array), (newSize) * sizeof (array)[0])

 





#define LE_DELETE_ARRAY(array) free((void *) (array))

#endif
#endif  











#define LE_MAKE_TAG(a, b, c, d) \
    (((le_uint32)(a) << 24) |   \
     ((le_uint32)(b) << 16) |   \
     ((le_uint32)(c) << 8)  |   \
      (le_uint32)(d))







enum LETableTags {
    LE_ACNT_TABLE_TAG = 0x61636E74UL, 
    LE_AVAR_TABLE_TAG = 0x61766172UL, 
    LE_BASE_TABLE_TAG = 0x42415345UL, 
    LE_BDAT_TABLE_TAG = 0x62646174UL, 
    LE_BHED_TABLE_TAG = 0x62686564UL, 
    LE_BLOC_TABLE_TAG = 0x626C6F63UL, 
    LE_BSLN_TABLE_TAG = 0x62736C6EUL, 
    LE_CFF__TABLE_TAG = 0x43464620UL, 
    LE_CMAP_TABLE_TAG = 0x636D6170UL, 
    LE_CVAR_TABLE_TAG = 0x63766172UL, 
    LE_CVT__TABLE_TAG = 0x63767420UL, 
    LE_DSIG_TABLE_TAG = 0x44534947UL, 
    LE_EBDT_TABLE_TAG = 0x45424454UL, 
    LE_EBLC_TABLE_TAG = 0x45424C43UL, 
    LE_EBSC_TABLE_TAG = 0x45425343UL, 
    LE_FDSC_TABLE_TAG = 0x66647363UL, 
    LE_FEAT_TABLE_TAG = 0x66656174UL, 
    LE_FMTX_TABLE_TAG = 0x666D7478UL, 
    LE_FPGM_TABLE_TAG = 0x6670676DUL, 
    LE_FVAR_TABLE_TAG = 0x66766172UL, 
    LE_GASP_TABLE_TAG = 0x67617370UL, 
    LE_GDEF_TABLE_TAG = 0x47444546UL, 
    LE_GLYF_TABLE_TAG = 0x676C7966UL, 
    LE_GPOS_TABLE_TAG = 0x47504F53UL, 
    LE_GSUB_TABLE_TAG = 0x47535542UL, 
    LE_GVAR_TABLE_TAG = 0x67766172UL, 
    LE_HDMX_TABLE_TAG = 0x68646D78UL, 
    LE_HEAD_TABLE_TAG = 0x68656164UL, 
    LE_HHEA_TABLE_TAG = 0x68686561UL, 
    LE_HMTX_TABLE_TAG = 0x686D7478UL, 
    LE_HSTY_TABLE_TAG = 0x68737479UL, 
    LE_JUST_TABLE_TAG = 0x6A757374UL, 
    LE_JSTF_TABLE_TAG = 0x4A535446UL, 
    LE_KERN_TABLE_TAG = 0x6B65726EUL, 
    LE_LCAR_TABLE_TAG = 0x6C636172UL, 
    LE_LOCA_TABLE_TAG = 0x6C6F6361UL, 
    LE_LTSH_TABLE_TAG = 0x4C545348UL, 
    LE_MAXP_TABLE_TAG = 0x6D617870UL, 
    LE_MORT_TABLE_TAG = 0x6D6F7274UL, 
    LE_MORX_TABLE_TAG = 0x6D6F7278UL, 
    LE_NAME_TABLE_TAG = 0x6E616D65UL, 
    LE_OPBD_TABLE_TAG = 0x6F706264UL, 
    LE_OS_2_TABLE_TAG = 0x4F532F32UL, 
    LE_PCLT_TABLE_TAG = 0x50434C54UL, 
    LE_POST_TABLE_TAG = 0x706F7374UL, 
    LE_PREP_TABLE_TAG = 0x70726570UL, 
    LE_PROP_TABLE_TAG = 0x70726F70UL, 
    LE_TRAK_TABLE_TAG = 0x7472616BUL, 
    LE_VDMX_TABLE_TAG = 0x56444D58UL, 
    LE_VHEA_TABLE_TAG = 0x76686561UL, 
    LE_VMTX_TABLE_TAG = 0x766D7478UL, 
    LE_VORG_TABLE_TAG = 0x564F5247UL, 
    LE_ZAPF_TABLE_TAG = 0x5A617066UL  
};







enum LEFeatureTags {
    LE_AALT_FEATURE_TAG = 0x61616C74UL, 
    LE_ABVF_FEATURE_TAG = 0x61627666UL, 
    LE_ABVM_FEATURE_TAG = 0x6162766DUL, 
    LE_ABVS_FEATURE_TAG = 0x61627673UL, 
    LE_AFRC_FEATURE_TAG = 0x61667263UL, 
    LE_AKHN_FEATURE_TAG = 0x616B686EUL, 
    LE_BLWF_FEATURE_TAG = 0x626C7766UL, 
    LE_BLWM_FEATURE_TAG = 0x626C776DUL, 
    LE_BLWS_FEATURE_TAG = 0x626C7773UL, 
    LE_CALT_FEATURE_TAG = 0x63616C74UL, 
    LE_CASE_FEATURE_TAG = 0x63617365UL, 
    LE_CCMP_FEATURE_TAG = 0x63636D70UL, 
    LE_CJCT_FEATURE_TAG = 0x636A6374UL, 
    LE_CLIG_FEATURE_TAG = 0x636C6967UL, 
    LE_CPSP_FEATURE_TAG = 0x63707370UL, 
    LE_CSWH_FEATURE_TAG = 0x63737768UL, 
    LE_CURS_FEATURE_TAG = 0x63757273UL, 
    LE_C2SC_FEATURE_TAG = 0x63327363UL, 
    LE_C2PC_FEATURE_TAG = 0x63327063UL, 
    LE_DIST_FEATURE_TAG = 0x64697374UL, 
    LE_DLIG_FEATURE_TAG = 0x646C6967UL, 
    LE_DNOM_FEATURE_TAG = 0x646E6F6DUL, 
    LE_EXPT_FEATURE_TAG = 0x65787074UL, 
    LE_FALT_FEATURE_TAG = 0x66616C74UL, 
    LE_FIN2_FEATURE_TAG = 0x66696E32UL, 
    LE_FIN3_FEATURE_TAG = 0x66696E33UL, 
    LE_FINA_FEATURE_TAG = 0x66696E61UL, 
    LE_FRAC_FEATURE_TAG = 0x66726163UL, 
    LE_FWID_FEATURE_TAG = 0x66776964UL, 
    LE_HALF_FEATURE_TAG = 0x68616C66UL, 
    LE_HALN_FEATURE_TAG = 0x68616C6EUL, 
    LE_HALT_FEATURE_TAG = 0x68616C74UL, 
    LE_HIST_FEATURE_TAG = 0x68697374UL, 
    LE_HKNA_FEATURE_TAG = 0x686B6E61UL, 
    LE_HLIG_FEATURE_TAG = 0x686C6967UL, 
    LE_HNGL_FEATURE_TAG = 0x686E676CUL, 
    LE_HWID_FEATURE_TAG = 0x68776964UL, 
    LE_INIT_FEATURE_TAG = 0x696E6974UL, 
    LE_ISOL_FEATURE_TAG = 0x69736F6CUL, 
    LE_ITAL_FEATURE_TAG = 0x6974616CUL, 
    LE_JALT_FEATURE_TAG = 0x6A616C74UL, 
    LE_JP78_FEATURE_TAG = 0x6A703738UL, 
    LE_JP83_FEATURE_TAG = 0x6A703833UL, 
    LE_JP90_FEATURE_TAG = 0x6A703930UL, 
    LE_KERN_FEATURE_TAG = 0x6B65726EUL, 
    LE_LFBD_FEATURE_TAG = 0x6C666264UL, 
    LE_LIGA_FEATURE_TAG = 0x6C696761UL, 
    LE_LJMO_FEATURE_TAG = 0x6C6A6D6FUL, 
    LE_LNUM_FEATURE_TAG = 0x6C6E756DUL, 
    LE_LOCL_FEATURE_TAG = 0x6C6F636CUL, 
    LE_MARK_FEATURE_TAG = 0x6D61726BUL, 
    LE_MED2_FEATURE_TAG = 0x6D656432UL, 
    LE_MEDI_FEATURE_TAG = 0x6D656469UL, 
    LE_MGRK_FEATURE_TAG = 0x6D67726BUL, 
    LE_MKMK_FEATURE_TAG = 0x6D6B6D6BUL, 
    LE_MSET_FEATURE_TAG = 0x6D736574UL, 
    LE_NALT_FEATURE_TAG = 0x6E616C74UL, 
    LE_NLCK_FEATURE_TAG = 0x6E6C636BUL, 
    LE_NUKT_FEATURE_TAG = 0x6E756B74UL, 
    LE_NUMR_FEATURE_TAG = 0x6E756D72UL, 
    LE_ONUM_FEATURE_TAG = 0x6F6E756DUL, 
    LE_OPBD_FEATURE_TAG = 0x6F706264UL, 
    LE_ORDN_FEATURE_TAG = 0x6F72646EUL, 
    LE_ORNM_FEATURE_TAG = 0x6F726E6DUL, 
    LE_PALT_FEATURE_TAG = 0x70616C74UL, 
    LE_PCAP_FEATURE_TAG = 0x70636170UL, 
    LE_PNUM_FEATURE_TAG = 0x706E756DUL, 
    LE_PREF_FEATURE_TAG = 0x70726566UL, 
    LE_PRES_FEATURE_TAG = 0x70726573UL, 
    LE_PSTF_FEATURE_TAG = 0x70737466UL, 
    LE_PSTS_FEATURE_TAG = 0x70737473UL, 
    LE_PWID_FEATURE_TAG = 0x70776964UL, 
    LE_QWID_FEATURE_TAG = 0x71776964UL, 
    LE_RAND_FEATURE_TAG = 0x72616E64UL, 
    LE_RLIG_FEATURE_TAG = 0x726C6967UL, 
    LE_RPHF_FEATURE_TAG = 0x72706866UL, 
    LE_RKRF_FEATURE_TAG = 0x726B7266UL, 
    LE_RTBD_FEATURE_TAG = 0x72746264UL, 
    LE_RTLA_FEATURE_TAG = 0x72746C61UL, 
    LE_RUBY_FEATURE_TAG = 0x72756279UL, 
    LE_SALT_FEATURE_TAG = 0x73616C74UL, 
    LE_SINF_FEATURE_TAG = 0x73696E66UL, 
    LE_SIZE_FEATURE_TAG = 0x73697A65UL, 
    LE_SMCP_FEATURE_TAG = 0x736D6370UL, 
    LE_SMPL_FEATURE_TAG = 0x736D706CUL, 
    LE_SS01_FEATURE_TAG = 0x73733031UL, 
    LE_SS02_FEATURE_TAG = 0x73733032UL, 
    LE_SS03_FEATURE_TAG = 0x73733033UL, 
    LE_SS04_FEATURE_TAG = 0x73733034UL, 
    LE_SS05_FEATURE_TAG = 0x73733035UL, 
    LE_SS06_FEATURE_TAG = 0x73733036UL, 
    LE_SS07_FEATURE_TAG = 0x73733037UL, 
    LE_SS08_FEATURE_TAG = 0x73733038UL, 
    LE_SS09_FEATURE_TAG = 0x73733039UL, 
    LE_SS10_FEATURE_TAG = 0x73733130UL, 
    LE_SS11_FEATURE_TAG = 0x73733131UL, 
    LE_SS12_FEATURE_TAG = 0x73733132UL, 
    LE_SS13_FEATURE_TAG = 0x73733133UL, 
    LE_SS14_FEATURE_TAG = 0x73733134UL, 
    LE_SS15_FEATURE_TAG = 0x73733135UL, 
    LE_SS16_FEATURE_TAG = 0x73733136UL, 
    LE_SS17_FEATURE_TAG = 0x73733137UL, 
    LE_SS18_FEATURE_TAG = 0x73733138UL, 
    LE_SS19_FEATURE_TAG = 0x73733139UL, 
    LE_SS20_FEATURE_TAG = 0x73733230UL, 
    LE_SUBS_FEATURE_TAG = 0x73756273UL, 
    LE_SUPS_FEATURE_TAG = 0x73757073UL, 
    LE_SWSH_FEATURE_TAG = 0x73777368UL, 
    LE_TITL_FEATURE_TAG = 0x7469746CUL, 
    LE_TJMO_FEATURE_TAG = 0x746A6D6FUL, 
    LE_TNAM_FEATURE_TAG = 0x746E616DUL, 
    LE_TNUM_FEATURE_TAG = 0x746E756DUL, 
    LE_TRAD_FEATURE_TAG = 0x74726164UL, 
    LE_TWID_FEATURE_TAG = 0x74776964UL, 
    LE_UNIC_FEATURE_TAG = 0x756E6963UL, 
    LE_VALT_FEATURE_TAG = 0x76616C74UL, 
    LE_VATU_FEATURE_TAG = 0x76617475UL, 
    LE_VERT_FEATURE_TAG = 0x76657274UL, 
    LE_VHAL_FEATURE_TAG = 0x7668616CUL, 
    LE_VJMO_FEATURE_TAG = 0x766A6D6FUL, 
    LE_VKNA_FEATURE_TAG = 0x766B6E61UL, 
    LE_VKRN_FEATURE_TAG = 0x766B726EUL, 
    LE_VPAL_FEATURE_TAG = 0x7670616CUL, 
    LE_VRT2_FEATURE_TAG = 0x76727432UL, 
    LE_ZERO_FEATURE_TAG = 0x7A65726FUL  
};




enum LEFeatureENUMs {
  LE_Kerning_FEATURE_ENUM = 0,   
  LE_Ligatures_FEATURE_ENUM = 1, 
  LE_CLIG_FEATURE_ENUM,  
  LE_DLIG_FEATURE_ENUM,  
  LE_HLIG_FEATURE_ENUM,  
  LE_LIGA_FEATURE_ENUM,  
  LE_RLIG_FEATURE_ENUM,  
  LE_SMCP_FEATURE_ENUM,  
  LE_FRAC_FEATURE_ENUM,  
  LE_AFRC_FEATURE_ENUM,  
  LE_ZERO_FEATURE_ENUM,  
  LE_SWSH_FEATURE_ENUM,  
  LE_CSWH_FEATURE_ENUM,  
  LE_SALT_FEATURE_ENUM,  
  LE_NALT_FEATURE_ENUM,  
  LE_RUBY_FEATURE_ENUM,  
  LE_SS01_FEATURE_ENUM,  
  LE_SS02_FEATURE_ENUM,  
  LE_SS03_FEATURE_ENUM,  
  LE_SS04_FEATURE_ENUM,  
  LE_SS05_FEATURE_ENUM,  
  LE_SS06_FEATURE_ENUM,  
  LE_SS07_FEATURE_ENUM,   
  
  LE_CHAR_FILTER_FEATURE_ENUM = 31, 
  LE_FEATURE_ENUM_MAX = LE_CHAR_FILTER_FEATURE_ENUM
};







#define LE_Kerning_FEATURE_FLAG   (1 << LE_Kerning_FEATURE_ENUM)
#define LE_Ligatures_FEATURE_FLAG (1 << LE_Ligatures_FEATURE_ENUM)
#define LE_CLIG_FEATURE_FLAG (1 << LE_CLIG_FEATURE_ENUM)
#define LE_DLIG_FEATURE_FLAG (1 << LE_DLIG_FEATURE_ENUM)
#define LE_HLIG_FEATURE_FLAG (1 << LE_HLIG_FEATURE_ENUM)
#define LE_LIGA_FEATURE_FLAG (1 << LE_LIGA_FEATURE_ENUM)
#define LE_RLIG_FEATURE_FLAG (1 << LE_RLIG_FEATURE_ENUM)
#define LE_SMCP_FEATURE_FLAG (1 << LE_SMCP_FEATURE_ENUM)
#define LE_FRAC_FEATURE_FLAG (1 << LE_FRAC_FEATURE_ENUM)
#define LE_AFRC_FEATURE_FLAG (1 << LE_AFRC_FEATURE_ENUM)
#define LE_ZERO_FEATURE_FLAG (1 << LE_ZERO_FEATURE_ENUM)
#define LE_SWSH_FEATURE_FLAG (1 << LE_SWSH_FEATURE_ENUM)
#define LE_CSWH_FEATURE_FLAG (1 << LE_CSWH_FEATURE_ENUM)
#define LE_SALT_FEATURE_FLAG (1 << LE_SALT_FEATURE_ENUM)
#define LE_NALT_FEATURE_FLAG (1 << LE_NALT_FEATURE_ENUM)
#define LE_RUBY_FEATURE_FLAG (1 << LE_RUBY_FEATURE_ENUM)
#define LE_SS01_FEATURE_FLAG (1 << LE_SS01_FEATURE_ENUM)
#define LE_SS02_FEATURE_FLAG (1 << LE_SS02_FEATURE_ENUM)
#define LE_SS03_FEATURE_FLAG (1 << LE_SS03_FEATURE_ENUM)
#define LE_SS04_FEATURE_FLAG (1 << LE_SS04_FEATURE_ENUM)
#define LE_SS05_FEATURE_FLAG (1 << LE_SS05_FEATURE_ENUM)
#define LE_SS06_FEATURE_FLAG (1 << LE_SS06_FEATURE_ENUM)
#define LE_SS07_FEATURE_FLAG (1 << LE_SS07_FEATURE_ENUM)

#define LE_CHAR_FILTER_FEATURE_FLAG (1 << LE_CHAR_FILTER_FEATURE_ENUM)




#define LE_DEFAULT_FEATURE_FLAG (LE_Kerning_FEATURE_FLAG | LE_Ligatures_FEATURE_FLAG) /**< default features */






enum LEErrorCode {
    
    LE_NO_SUBFONT_WARNING          = U_USING_DEFAULT_WARNING, 

    
    LE_NO_ERROR                     = U_ZERO_ERROR, 

    
    LE_ILLEGAL_ARGUMENT_ERROR       = U_ILLEGAL_ARGUMENT_ERROR,  
    LE_MEMORY_ALLOCATION_ERROR      = U_MEMORY_ALLOCATION_ERROR, 
    LE_INDEX_OUT_OF_BOUNDS_ERROR    = U_INDEX_OUTOFBOUNDS_ERROR, 
    LE_NO_LAYOUT_ERROR              = U_UNSUPPORTED_ERROR,       
    LE_INTERNAL_ERROR               = U_INTERNAL_PROGRAM_ERROR,  
    LE_FONT_FILE_NOT_FOUND_ERROR    = U_FILE_ACCESS_ERROR,       
    LE_MISSING_FONT_TABLE_ERROR     = U_MISSING_RESOURCE_ERROR   
};

#ifndef __cplusplus





typedef enum LEErrorCode LEErrorCode;
#endif






#define LE_SUCCESS(code) (U_SUCCESS((UErrorCode)code))






#define LE_FAILURE(code) (U_FAILURE((UErrorCode)code))


#endif
