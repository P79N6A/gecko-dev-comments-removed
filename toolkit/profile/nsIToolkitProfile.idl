/* -*- Mode: IDL; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIFile;
interface nsIProfileUnlocker;

/**
 * Hold on to a profile lock. Once you release the last reference to this
 * interface, the profile lock is released.
 */
[builtinclass, scriptable, uuid(b1c2f328-de6e-45af-a53a-5ec7ce23166e)]
interface nsIProfileLock : nsISupports
{
    /**
     * The main profile directory.
     */
    readonly attribute nsIFile directory;
    
    /**
     * A directory corresponding to the main profile directory that exists for
     * the purpose of storing data on the local filesystem, including cache
     * files or other data files that may not represent critical user data.
     * (e.g., this directory may not be included as part of a backup scheme.)
     *
     * In some cases, this directory may just be the main profile directory.
     */
    readonly attribute nsIFile localDirectory;

    /**
     * The timestamp of an existing profile lock at lock time.
     */
    readonly attribute PRTime replacedLockTime;

    /**
     * Unlock the profile.
     */
    void unlock();
};

/**
 * A interface representing a profile.
 */
[builtinclass, scriptable, uuid(cc53f90b-d1a5-4524-a4db-dc929e656f6b)]
interface nsIToolkitProfile : nsISupports
{
    /**
     * The location of the profile directory.
     */
    readonly attribute nsIFile rootDir;

    /**
     * The location of the profile local directory, which may be the same as
     * the root directory.  See nsIProfileLock::localDirectory.
     */
    readonly attribute nsIFile localDir;

    /**
     * The name of the profile.
     */
    attribute AUTF8String name;

    /**
     * Removes the profile from the registry of profiles.
     *
     * @param removeFiles
     *        Indicates whether or not the profile directory should be
     *        removed in addition.
     */
    void remove(in boolean removeFiles);

    /**
     * Lock this profile using platform-specific locking methods.
     *
     * @param lockFile If locking fails, this may return a lockFile object
     *                 which can be used in platform-specific ways to
     *                 determine which process has the file locked. Null
     *                 may be passed.
     * @return An interface which holds a profile lock as long as you reference
     *         it.
     * @throws NS_ERROR_FILE_ACCESS_DENIED if the profile was already locked.
     */
    nsIProfileLock lock(out nsIProfileUnlocker aUnlocker);
};
