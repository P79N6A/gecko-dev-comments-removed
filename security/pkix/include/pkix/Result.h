























#ifndef mozilla_pkix__Result_h
#define mozilla_pkix__Result_h

#include "pkix/enumclass.h"

namespace mozilla { namespace pkix {

static const unsigned int FATAL_ERROR_FLAG = 0x800;

MOZILLA_PKIX_ENUM_CLASS Result
{
  Success = 0,

  ERROR_BAD_DER = 1,
  ERROR_CA_CERT_INVALID = 2,
  ERROR_BAD_SIGNATURE = 3,
  ERROR_CERT_BAD_ACCESS_LOCATION = 4,
  ERROR_CERT_NOT_IN_NAME_SPACE = 5,
  ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED = 6,
  ERROR_CONNECT_REFUSED = 7,
  ERROR_EXPIRED_CERTIFICATE = 8,
  ERROR_EXTENSION_VALUE_INVALID = 9,
  ERROR_INADEQUATE_CERT_TYPE = 10,
  ERROR_INADEQUATE_KEY_USAGE = 11,
  ERROR_INVALID_ALGORITHM = 12,
  ERROR_INVALID_TIME = 13,
  ERROR_KEY_PINNING_FAILURE = 14,
  ERROR_PATH_LEN_CONSTRAINT_INVALID = 15,
  ERROR_POLICY_VALIDATION_FAILED = 16,
  ERROR_REVOKED_CERTIFICATE = 17,
  ERROR_UNKNOWN_CRITICAL_EXTENSION = 18,
  ERROR_UNKNOWN_ISSUER = 19,
  ERROR_UNTRUSTED_CERT = 20,
  ERROR_UNTRUSTED_ISSUER = 21,

  ERROR_OCSP_BAD_SIGNATURE = 22,
  ERROR_OCSP_INVALID_SIGNING_CERT = 23,
  ERROR_OCSP_MALFORMED_REQUEST = 24,
  ERROR_OCSP_MALFORMED_RESPONSE = 25,
  ERROR_OCSP_OLD_RESPONSE = 26,
  ERROR_OCSP_REQUEST_NEEDS_SIG = 27,
  ERROR_OCSP_RESPONDER_CERT_INVALID = 28,
  ERROR_OCSP_SERVER_ERROR = 29,
  ERROR_OCSP_TRY_SERVER_LATER = 30,
  ERROR_OCSP_UNAUTHORIZED_REQUEST = 31,
  ERROR_OCSP_UNKNOWN_RESPONSE_STATUS = 32,
  ERROR_OCSP_UNKNOWN_CERT = 33,
  ERROR_OCSP_FUTURE_RESPONSE = 34,

  ERROR_UNKNOWN_ERROR = 35,

  ERROR_INVALID_KEY = 36,
  ERROR_UNSUPPORTED_KEYALG = 37,

  

  FATAL_ERROR_INVALID_ARGS = FATAL_ERROR_FLAG | 1,
  FATAL_ERROR_INVALID_STATE = FATAL_ERROR_FLAG | 2,
  FATAL_ERROR_LIBRARY_FAILURE = FATAL_ERROR_FLAG | 3,
  FATAL_ERROR_NO_MEMORY = FATAL_ERROR_FLAG | 4,

  
};








#if !defined(_MSC_VER) || (_MSC_VER >= 1700)
static const Result Success = Result::Success;
#endif

inline bool
IsFatalError(Result rv)
{
  return static_cast<unsigned int>(rv) & FATAL_ERROR_FLAG;
}

} } 

#endif
